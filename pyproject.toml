[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "orm-capital-calculator"
version = "0.1.0"
description = "ORM Capital Calculator Engine - RBI Basel III SMA Compliance System"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev@example.com"},
]
keywords = ["basel", "sma", "operational-risk", "capital", "rbi", "banking"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "fastapi>=0.104.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "uvicorn[standard]>=0.24.0",
    "alembic>=1.12.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "aiosqlite>=0.19.0",  # SQLite async driver
    "python-multipart>=0.0.6",  # For form data
    "python-jose[cryptography]>=3.3.0",  # For JWT tokens
    "passlib[bcrypt]>=1.7.4",  # For password hashing
    "tenacity>=8.2.0",  # For retry logic
    "numpy>=1.24.0",  # For mathematical calculations
    "pandas>=2.0.0",  # For data manipulation
    "slowapi>=0.1.9",  # For rate limiting
    "pydantic-settings>=2.0.0",  # For configuration management
    "psutil>=5.9.0",  # For system metrics
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "ruff>=0.0.290",
    "pre-commit>=3.4.0",
    "httpx>=0.25.0",  # For testing FastAPI
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "faker>=19.0.0",  # For generating test data
]

production = [
    "gunicorn>=21.2.0",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",  # PostgreSQL sync driver for production
]

cache = [
    "redis>=5.0.0",  # Redis for caching
]

[project.urls]
Homepage = "https://github.com/example/orm-capital-calculator"
Documentation = "https://orm-capital-calculator.readthedocs.io"
Repository = "https://github.com/example/orm-capital-calculator.git"
Issues = "https://github.com/example/orm-capital-calculator/issues"

[project.scripts]
orm-server = "orm_calculator.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/orm_calculator"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "sqlalchemy.*",
    "fastapi.*",
    "uvicorn.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]